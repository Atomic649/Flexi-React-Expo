x start 
npx expo start

x Create New Project
npx create-expo-app@latest Flexi-React-Expo -t tabs


x Change Icon Image
Constants > icons 
Edit URL


x SetUp Backend
mkdir backend 
cd backend 
! create backend folder

npm init -y 
! create package.json file

npm install express 
! install dependencies

npm install --save-dev nodemon
! install nodemon for auto server restart

! Crete index.ts file

npm install --save-dev @types/cors
! install cors for cross origin resource sharing

npm i @types/body-parser
! install body-parser for parsing request body

npm install --save @types/express
! install express types for typescript

npm install prisma --save-dev
! install prisma for database

npm install @prisma/client
! install prisma client 

npx prisma init
! initialize prisma setup folder

npm i joi
! install joi for validation

npm i bcrypt
! install bcrypt for password hashing

npm i jsonwebtoken
! install jsonwebtoken for token generation

npm i @types/jsonwebtoken
npm i jsonwebtoken 



log emoji
✅ - get
💾 - save
🗑️ - delete
🔍 - search
🔧 - Configuratio
📝 - Documentation
🐛 - Bug Fix
🚀 - New Feature
🔥 - Remove Code
🤖 - Tests
🛠 - Refactor
🎨 - Style
🔖 - Version Tag
📰 - Release
🚧 - Work In Progress
💄 - UI
📦 - Package.json
👷 - CI/CD
🔊 - Logging
🚨 - Breaking Change
👌 - Code Review
👽 - Compatibility
📦 - Dependency
🚚 - Move File
📄 - License
🚑 - Critical Hotfix
📦 - Package.json



import { Request, Response } from "express";
import fs from "fs";
import pdfParse from "pdf-parse";

// post url from device to backend
// hardcoded url for now
export const extractPdf = async (req: Request, res: Response): Promise<void> => {
    // hardcoded file path
    const filePath = "/Volumes/LACIES/Flexi-React-Expo/backend/uploads/images/pdf/AcctSt2.pdf";

    // read file
    const buffer = fs.readFileSync(filePath);
    const data = await pdfParse(buffer);
    let text = data.text;

    console.log("🔥text", text);


    // extract specific patterns
    // pattern to match: X1/ENET and X2/ENET  both credit and debit
    // const pattern = /\bX[12]\/ENET\d{1,3}(?:,\d{3})*\.\d{2}\d{1,3}(?:,\d{3})*\.\d{2}\b/g;

    // pattern to match: X2/ENET only credit
    const pattern = /\bX[2]\/ENET\d{1,3}(?:,\d{3})*\.\d{2}\d{1,3}(?:,\d{3})*\.\d{2}\b/g;
    const matches = text.match(pattern);

    // process matches to desired format
    const formattedMatches = matches?.map(match => {
        return match.replace(/(\d{1,3}(?:,\d{3})*\.\d{2})\d{1,3}(?:,\d{3})*\.\d{2}/, '$1');
    });

    res.json({ matches: formattedMatches });


};
